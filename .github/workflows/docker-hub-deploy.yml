name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

env:
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  PROJECT_NAME: coffee-counter

jobs:
  frontend-tests:
    name: Frontend CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --watch=false --passWithNoTests
        env:
          CI: true

      - name: Build production bundle
        run: npm run build
        env:
          CI: true

  auth-service-tests:
    name: Auth Service CI
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: coffee_counter
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      NODE_ENV: test
      PORT: 3001
      DB_HOST: 127.0.0.1
      DB_PORT: 5432
      DB_NAME: coffee_counter
      DB_USER: postgres
      DB_PASSWORD: postgres
      JWT_SECRET: testsecret
      JWT_EXPIRES_IN: 15m
      BCRYPT_ROUNDS: 10
      REDIS_HOST: 127.0.0.1
      REDIS_PORT: 6379
    defaults:
      run:
        working-directory: auth-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
          cache-dependency-path: auth-service/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Wait for PostgreSQL
        env:
          PGPASSWORD: postgres
        run: |
          until pg_isready -h 127.0.0.1 -p 5432 -U postgres; do
            sleep 1
          done

      - name: Apply database schema
        env:
          PGPASSWORD: postgres
        run: |
          psql -h 127.0.0.1 -U postgres -d coffee_counter -f ../database/init/01-init.sql
          psql -h 127.0.0.1 -U postgres -d coffee_counter -c "DELETE FROM users;"

      - name: Run unit tests
        run: npm test -- --runInBand

  api-service-tests:
    name: API Service CI
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api-service
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo artifacts
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            api-service -> target

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run tests
        run: cargo test --locked

  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs:
      - frontend-tests
      - auth-service-tests
      - api-service-tests

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.PROJECT_NAME }}-frontend
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.PROJECT_NAME }}-auth-service
            ${{ env.DOCKER_HUB_USERNAME }}/${{ env.PROJECT_NAME }}-api-service
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.PROJECT_NAME }}-frontend:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Auth Service
        uses: docker/build-push-action@v5
        with:
          context: ./auth-service
          file: ./auth-service/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.PROJECT_NAME }}-auth-service:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push API Service
        uses: docker/build-push-action@v5
        with:
          context: ./api-service
          file: ./api-service/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.DOCKER_HUB_USERNAME }}/${{ env.PROJECT_NAME }}-api-service:latest
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test deployment
        if: github.event_name != 'pull_request'
        run: |
          # Create test environment
          echo "Testing Docker Hub images..."
          docker pull ${{ env.DOCKER_HUB_USERNAME }}/${{ env.PROJECT_NAME }}-frontend:latest
          docker pull ${{ env.DOCKER_HUB_USERNAME }}/${{ env.PROJECT_NAME }}-auth-service:latest
          docker pull ${{ env.DOCKER_HUB_USERNAME }}/${{ env.PROJECT_NAME }}-api-service:latest

          # Basic smoke test
          docker run --rm ${{ env.DOCKER_HUB_USERNAME }}/${{ env.PROJECT_NAME }}-frontend:latest nginx -t
          echo "âœ… All images built and pushed successfully!"

      - name: Update deployment status
        if: github.event_name != 'pull_request'
        run: |
          echo "ðŸŽ‰ Deployment completed!"
          echo "ðŸ“¦ Images available at:"
          echo "  - ${{ env.DOCKER_HUB_USERNAME }}/${{ env.PROJECT_NAME }}-frontend:latest"
          echo "  - ${{ env.DOCKER_HUB_USERNAME }}/${{ env.PROJECT_NAME }}-auth-service:latest"
          echo "  - ${{ env.DOCKER_HUB_USERNAME }}/${{ env.PROJECT_NAME }}-api-service:latest"
